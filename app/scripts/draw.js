// Generated by CoffeeScript 1.6.2
(function() {
  var BumblerSpeech, DrawChinese;

  BumblerSpeech = (function() {
    function BumblerSpeech(options) {
      var mergedOptions,
        _this = this;

      if (options == null) {
        options = {};
      }
      if (typeof options === "string") {
        this.player = document.querySelector(options);
        this.numberQueue = [];
        this.playing = false;
      } else {
        mergedOptions = $.extend({}, this.defaultOptions, options);
        this.player = document.querySelector(mergedOptions.player);
        this.numberQueue = mergedOptions.numbers;
        this.playing = false;
      }
      $(this).on('speechEnd', function() {
        return _this.delay(300, function() {
          var currentNumber;

          currentNumber = _this.numberQueue.shift();
          if (currentNumber === void 0 || null) {
            _this.playing = false;
            return;
          }
          return _this.playNumber(currentNumber);
        });
      });
    }

    BumblerSpeech.prototype.defaultOptions = {
      player: '#ma-speech',
      numbers: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
    };

    BumblerSpeech.prototype.delay = function(ms, func) {
      return setTimeout(func, ms);
    };

    BumblerSpeech.prototype.playPartial = function(partialIndex, rate) {
      var duration, partial,
        _this = this;

      if (rate == null) {
        rate = 1.0;
      }
      partial = this.AUDIO_MAP[partialIndex];
      this.player.currentTime = partial.start;
      this.player.play();
      duration = partial.duration / rate * 1000;
      return setTimeout(function() {
        return _this.player.pause();
      }, duration);
    };

    BumblerSpeech.prototype.playSequence = function(indexQueue, literal) {
      var audioEventHandler, queueIterate,
        _this = this;

      if (literal == null) {
        literal = false;
      }
      audioEventHandler = function() {
        _this.player.removeEventListener('pause', audioEventHandler);
        return queueIterate();
      };
      queueIterate = function() {
        var currentIndex, playbackRate;

        currentIndex = indexQueue.shift();
        playbackRate = 0.9;
        if (currentIndex === void 0 || null) {
          $(_this).trigger('speechEnd');
          return false;
        }
        if (indexQueue.length > 0) {
          playbackRate = currentIndex === "d10" ? 1.55 : 1.20;
        }
        if (literal) {
          playbackRate = 1;
        }
        _this.player.addEventListener('pause', audioEventHandler);
        return _this.playPartial(currentIndex, playbackRate);
      };
      return queueIterate();
    };

    BumblerSpeech.prototype.numberToSpeechQueue = function(number) {
      var digit1, digit10, queueArray;

      if (number === "thank") {
        return ["thank"];
      }
      if (number >= 100 || number < 1) {
        return false;
      }
      queueArray = [];
      digit1 = number % 10;
      digit10 = (number - digit1) / 10;
      if (digit10 > 0) {
        if (digit10 > 1) {
          queueArray.push("d" + digit10);
        }
        queueArray.push("d10");
      }
      if (digit1 > 0) {
        queueArray.push("d" + digit1);
      }
      return queueArray;
    };

    BumblerSpeech.prototype.playNumber = function(number) {
      var speechQueue;

      speechQueue = this.numberToSpeechQueue(number);
      return this.playSequence(speechQueue);
    };

    BumblerSpeech.prototype.play = function() {
      if (!this.playing) {
        $(this).trigger('speechEnd');
      }
      return this.playing = true;
    };

    BumblerSpeech.prototype.inputElement = '#word';

    BumblerSpeech.prototype.checkInput = function() {
      var numberToPlay;

      numberToPlay = $(this.inputElement).val();
      numberToPlay = this.chineseNumberToNumber(numberToPlay);
      numberToPlay = numberToPlay.match(/\d+/);
      if ((numberToPlay != null) && (0 < numberToPlay && numberToPlay < 100)) {
        return numberToPlay;
      } else {
        $(this.inputElement).val('').focus();
        return false;
      }
    };

    BumblerSpeech.prototype.chineseNumberToNumber = function(word) {
      var utf8code;

      utf8code = escape(word).replace(/%u/g, "").replace(/4E5D/ig, 9).replace(/516B/ig, 8).replace(/4E03/ig, 7).replace(/516D/ig, 6).replace(/4E94/ig, 5).replace(/56DB/ig, 4).replace(/4E09/ig, 3).replace(/4E8C/ig, 2).replace(/4E00/ig, 1);
      return utf8code;
    };

    BumblerSpeech.prototype.digitplay = function() {
      var seq, word, wordRegex;

      word = $(this.inputElement).val();
      word = this.chineseNumberToNumber(word);
      if (word.match(/0/)) {
        alert('can not input "zero"');
      }
      wordRegex = word.match(/^[1-9]+$/);
      if (wordRegex) {
        seq = wordRegex[0].replace(/([\d])/g, ",d$1").split(",");
        seq.splice(0, 1);
        return this.playSequence(seq, true);
      }
    };

    BumblerSpeech.prototype.AUDIO_MAP = {
      d1: {
        start: 0.45,
        duration: 0.5
      },
      d2: {
        start: 1.43,
        duration: 0.5
      },
      d3: {
        start: 2.65,
        duration: 0.5
      },
      d4: {
        start: 3.55,
        duration: 0.5
      },
      d5: {
        start: 4.9,
        duration: 0.6
      },
      d6: {
        start: 5.9,
        duration: 0.6
      },
      d7: {
        start: 6.7,
        duration: 0.55
      },
      d8: {
        start: 7.75,
        duration: 0.5
      },
      d9: {
        start: 8.77,
        duration: 0.53
      },
      d10: {
        start: 9.52,
        duration: 0.53
      },
      thank: {
        start: 10.73,
        duration: 1.55
      }
    };

    return BumblerSpeech;

  })();

  DrawChinese = (function() {
    function DrawChinese(options) {
      if (options == null) {
        options = {};
      }
    }

    DrawChinese.prototype.filterNodes = function(childNodes) {
      var n, nodes, _i, _len;

      nodes = [];
      for (_i = 0, _len = childNodes.length; _i < _len; _i++) {
        n = childNodes[_i];
        if (n.nodeType === 1) {
          nodes.push(n);
        }
      }
      return nodes;
    };

    DrawChinese.prototype.strokeOutline = function(paper, outline, pathAttrs) {
      var a, node, outlineElement, path, _i, _len, _ref;

      path = [];
      _ref = outline.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node.nodeType !== 1) {
          continue;
        }
        a = node.attributes;
        if (!a) {
          continue;
        }
        switch (node.nodeName) {
          case "MoveTo":
            path.push(["M", parseFloat(a.x.value), parseFloat(a.y.value)]);
            break;
          case "LineTo":
            path.push(["L", parseFloat(a.x.value), parseFloat(a.y.value)]);
            break;
          case "QuadTo":
            path.push(["Q", parseFloat(a.x1.value), parseFloat(a.y1.value), parseFloat(a.x2.value), parseFloat(a.y2.value)]);
        }
      }
      outlineElement = paper.path(path).attr(pathAttrs).transform("s0.2,0.2,0,0");
      return outlineElement;
    };

    DrawChinese.prototype.fetchStrokeXml = function(code, cb) {
      return $.get("../utf8/" + code.toLowerCase() + ".xml", cb, "xml");
    };

    DrawChinese.prototype.strokeWord = function(word, cb) {
      var utf8code,
        _this = this;

      utf8code = escape(word).replace(/%u/, "");
      return this.fetchStrokeXml(utf8code, function(doc) {
        var color, delay, outline, outlines, paper, pathAttrs, timeoutSeconds, _i, _len, _results;

        outlines = doc.getElementsByTagName('Outline');
        paper = Raphael("holder", 430, 430);
        Raphael.getColor();
        Raphael.getColor();
        color = Raphael.getColor();
        pathAttrs = {
          stroke: color,
          "stroke-width": 5,
          "stroke-linecap": "round",
          "fill": color,
          "opacity": 0.5
        };
        timeoutSeconds = 0;
        delay = 800;
        _results = [];
        for (_i = 0, _len = outlines.length; _i < _len; _i++) {
          outline = outlines[_i];
          _results.push((function(outline) {
            return setTimeout((function() {
              outline = _this.strokeOutline(paper, outline, pathAttrs);
              return outline.animate({
                "opacity": 1
              }, delay);
            }), timeoutSeconds += delay);
          })(outline));
        }
        return _results;
      });
    };

    DrawChinese.prototype.strokeWords = function(words) {
      var a, _i, _len, _ref, _results;

      _ref = words.split(/(?:)/).reverse();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        _results.push(this.strokeWord(a));
      }
      return _results;
    };

    return DrawChinese;

  })();

  $(function() {
    var bumbler, draw, w;

    draw = new DrawChinese;
    bumbler = new BumblerSpeech('#ma-speech');
    draw.strokeWord($('#word').val());
    setTimeout(function() {
      return bumbler.digitplay();
    }, 2000);
    $('#word').change(function(e) {
      var word;

      $('#holder').empty();
      word = $(this).val();
      draw.strokeWords(word);
      return bumbler.digitplay();
    });
    if (location.hash) {
      w = decodeURI(location.hash.replace(/^#/, ""));
      if (w) {
        $('#word').val(w);
      }
      draw.strokeWords($('#word').val());
      return bumbler.digitplay();
    }
  });

}).call(this);
